{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AgregarFechaComponent = class AgregarFechaComponent {\n  constructor(router, periodoService) {\n    this.router = router;\n    this.periodoService = periodoService;\n    this.fechaDesde = '';\n    this.fechaHasta = '';\n    this.fechaDesdeInvalida = false;\n    this.fechaHastaInvalida = false;\n    this.errorText = '';\n  }\n  agregarFecha(formulario) {\n    if (this.fechaDesde && this.fechaHasta) {\n      if (this.fechaDesde == '') {\n        this.fechaDesdeInvalida = true;\n      }\n      if (this.fechaHasta == '') {\n        this.fechaHastaInvalida = true;\n      } else {\n        this.fechaDesdeInvalida = this.fechaDesde > this.fechaHasta;\n        this.fechaHastaInvalida = this.fechaDesde > this.fechaHasta;\n      }\n      //cambiando formato a fecha, para utilizar los metodos\n      const fechaDesdeDate = new Date(this.fechaDesde);\n      const fechaHastaDate = new Date(this.fechaHasta);\n      const añoDesde = fechaDesdeDate.getFullYear();\n      const mesDesde = fechaDesdeDate.getMonth() + 1;\n      const añoHasta = fechaHastaDate.getFullYear();\n      const mesHasta = fechaHastaDate.getMonth() + 1;\n      let semestre;\n      if (mesDesde >= 1 && mesDesde <= 7 && añoDesde === añoHasta && mesHasta >= 1 && mesHasta <= 7) {\n        semestre = 1;\n      } else if (mesDesde >= 8 && mesDesde <= 12 && añoDesde === añoHasta && mesHasta >= 8 && mesHasta <= 12) {\n        semestre = 2;\n      } else {\n        semestre = 0;\n      }\n      const Fch_Inicio = fechaDesdeDate.toISOString().split('T')[0];\n      const Fch_Fin = fechaHastaDate.toISOString().split('T')[0];\n      console.log(Fch_Fin);\n      console.log(Fch_Inicio);\n      let periodoActualizacion = {\n        Año: añoDesde,\n        Semestre: semestre,\n        Fch_Inicio: Fch_Inicio,\n        Fch_Fin: Fch_Fin\n      };\n      this.periodoService.getPeriodosActualizacion().subscribe(response => {\n        if (response.length !== 0) {\n          const nuevaFecha = {\n            fechaAnteriorInicio: response[0].fch_Inicio,\n            fechaNuevaInicio: periodoActualizacion.Fch_Inicio,\n            fechaAnteriorFin: response[0].fch_Fin,\n            fechaNuevaFin: periodoActualizacion.Fch_Fin,\n            semestre: periodoActualizacion.Semestre,\n            año: periodoActualizacion.Año\n          };\n          this.periodoService.cambiarFecha(nuevaFecha).subscribe(response => {\n            console.log(response);\n            this.router.navigate(['/indexAdmin/displayFunc']);\n          }, error => {\n            console.log(error);\n          });\n        } else {\n          this.periodoService.addFecha(periodoActualizacion).subscribe(response => {\n            console.log(response);\n            this.router.navigate(['/indexAdmin/displayFunc']);\n          }, error => {\n            console.log(error);\n            console.log(\"ERROR: \", error.error);\n          });\n        }\n      }, error => {\n        console.log(error);\n      });\n    } else {\n      console.log('Fechas inválidas');\n    }\n  }\n  // Función para verificar si la fecha desde es inválida\n  esFechaDesdeInvalida() {\n    if (this.fechaDesde == '') {\n      this.errorText = 'Por favor complete este campo';\n    } else {\n      if (this.fechaDesdeInvalida) {\n        this.errorText = 'La fecha desde no puede ser mayor que la fecha hasta.';\n      }\n    }\n    return this.fechaDesdeInvalida;\n  }\n  // Función para verificar si la fecha hasta es inválida\n  esFechaHastaInvalida() {\n    if (this.fechaHasta == '') {\n      this.errorText = 'Por favor complete este campo';\n    } else {\n      if (this.fechaHastaInvalida) {\n        this.errorText = 'La fecha hasta no puede ser menor que la fecha desde.';\n      }\n    }\n    return this.fechaHastaInvalida;\n  }\n};\nAgregarFechaComponent = __decorate([Component({\n  selector: 'app-agregar-fecha',\n  templateUrl: './agregar-fecha.component.html',\n  styleUrls: ['./agregar-fecha.component.css']\n})], AgregarFechaComponent);","map":{"version":3,"names":["Component","AgregarFechaComponent","constructor","router","periodoService","fechaDesde","fechaHasta","fechaDesdeInvalida","fechaHastaInvalida","errorText","agregarFecha","formulario","fechaDesdeDate","Date","fechaHastaDate","añoDesde","getFullYear","mesDesde","getMonth","añoHasta","mesHasta","semestre","Fch_Inicio","toISOString","split","Fch_Fin","console","log","periodoActualizacion","Año","Semestre","getPeriodosActualizacion","subscribe","response","length","nuevaFecha","fechaAnteriorInicio","fch_Inicio","fechaNuevaInicio","fechaAnteriorFin","fch_Fin","fechaNuevaFin","año","cambiarFecha","navigate","error","addFecha","esFechaDesdeInvalida","esFechaHastaInvalida","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USUARIO\\Escritorio\\UCU\\BASES DE DATOS 1\\ULTIMA VERSION OBLIGATORIO DEFINITIVA\\Obligatorio-BDD\\proyecto-angular\\src\\app\\components\\agregar-fecha\\agregar-fecha.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { PeriodoActualizacionService } from '../../services/periodo-actualizacion.service';\r\nimport { PeriodosActualizacion } from '../../interfaces/periodosActualizacion';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-agregar-fecha',\r\n  templateUrl: './agregar-fecha.component.html',\r\n  styleUrls: ['./agregar-fecha.component.css']\r\n})\r\nexport class AgregarFechaComponent {\r\n\r\n  fechaDesde: string = '';\r\n  fechaHasta: string = '';\r\n  fechaDesdeInvalida: boolean = false;\r\n  fechaHastaInvalida: boolean = false;\r\n  errorText = '';\r\n\r\n  constructor(private router: Router, private periodoService: PeriodoActualizacionService) {\r\n  }\r\n\r\n  agregarFecha(formulario: any) {\r\n\r\n    if (this.fechaDesde && this.fechaHasta) {\r\n      if (this.fechaDesde == '') {\r\n        this.fechaDesdeInvalida = true;\r\n      } if (this.fechaHasta == '') {\r\n        this.fechaHastaInvalida = true;\r\n      } else {\r\n        this.fechaDesdeInvalida = this.fechaDesde > this.fechaHasta;\r\n        this.fechaHastaInvalida = this.fechaDesde > this.fechaHasta\r\n      }\r\n      //cambiando formato a fecha, para utilizar los metodos\r\n      const fechaDesdeDate: Date = new Date(this.fechaDesde);\r\n      const fechaHastaDate: Date = new Date(this.fechaHasta);\r\n\r\n      const añoDesde: number = fechaDesdeDate.getFullYear();\r\n      const mesDesde: number = fechaDesdeDate.getMonth() + 1;\r\n\r\n      const añoHasta: number = fechaHastaDate.getFullYear();\r\n      const mesHasta: number = fechaHastaDate.getMonth() + 1;\r\n\r\n\r\n      let semestre: number;\r\n\r\n      if (\r\n        (mesDesde >= 1 && mesDesde <= 7 && añoDesde === añoHasta && mesHasta >= 1 && mesHasta <= 7)\r\n      ) {\r\n        semestre = 1;\r\n      } else if (\r\n\r\n        (mesDesde >= 8 && mesDesde <= 12 && añoDesde === añoHasta && mesHasta >= 8 && mesHasta <= 12)\r\n      ) {\r\n        semestre = 2;\r\n      } else {\r\n        semestre = 0;\r\n      }\r\n\r\n\r\n      const Fch_Inicio = fechaDesdeDate.toISOString().split('T')[0];\r\n      const Fch_Fin = fechaHastaDate.toISOString().split('T')[0];\r\n\r\n      console.log(Fch_Fin)\r\n      console.log(Fch_Inicio)\r\n      let periodoActualizacion: PeriodosActualizacion = {\r\n        Año: añoDesde,\r\n        Semestre: semestre,\r\n        Fch_Inicio: Fch_Inicio,\r\n        Fch_Fin: Fch_Fin\r\n      }\r\n\r\n\r\n      this.periodoService.getPeriodosActualizacion().subscribe(\r\n        (response: any) => {\r\n          if (response.length !== 0) {\r\n            const nuevaFecha = {\r\n              fechaAnteriorInicio: response[0].fch_Inicio,\r\n              fechaNuevaInicio: periodoActualizacion.Fch_Inicio,\r\n              fechaAnteriorFin: response[0].fch_Fin,\r\n              fechaNuevaFin: periodoActualizacion.Fch_Fin,\r\n              semestre: periodoActualizacion.Semestre,\r\n              año: periodoActualizacion.Año\r\n            }\r\n            \r\n          this.periodoService.cambiarFecha(nuevaFecha).subscribe(\r\n            response => {\r\n              console.log(response);\r\n              this.router.navigate(['/indexAdmin/displayFunc']);\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            }\r\n          )\r\n          } else {\r\n            this.periodoService.addFecha(periodoActualizacion).subscribe(\r\n              response => {\r\n                console.log(response);\r\n                this.router.navigate(['/indexAdmin/displayFunc']);\r\n              },\r\n              error => {\r\n                console.log(error);\r\n                console.log(\"ERROR: \", error.error);\r\n              }\r\n            );\r\n          }\r\n        },\r\n        (error: any) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else {\r\n      console.log('Fechas inválidas');\r\n    }\r\n  }\r\n\r\n\r\n  // Función para verificar si la fecha desde es inválida\r\n  esFechaDesdeInvalida(): boolean {\r\n    if (this.fechaDesde == '') {\r\n      this.errorText = 'Por favor complete este campo';\r\n    } else {\r\n      if (this.fechaDesdeInvalida) {\r\n        this.errorText = 'La fecha desde no puede ser mayor que la fecha hasta.'\r\n      }\r\n    }\r\n    return this.fechaDesdeInvalida;\r\n  }\r\n\r\n  // Función para verificar si la fecha hasta es inválida\r\n  esFechaHastaInvalida(): boolean {\r\n    if (this.fechaHasta == '') {\r\n      this.errorText = 'Por favor complete este campo';\r\n    } else {\r\n      if (this.fechaHastaInvalida) {\r\n        this.errorText = 'La fecha hasta no puede ser menor que la fecha desde.'\r\n      }\r\n    }\r\n    return this.fechaHastaInvalida;\r\n  }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}