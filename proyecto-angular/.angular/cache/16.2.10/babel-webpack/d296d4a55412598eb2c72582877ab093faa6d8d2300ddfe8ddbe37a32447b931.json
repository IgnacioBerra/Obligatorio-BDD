{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/coe';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let AgregarFechaComponent = class AgregarFechaComponent {\n  constructor() {\n    // fechaDesde: Date = new Date();\n    // fechaHasta: Date = new Date();\n    // constructor(private toastr: ToastrService, private router: Router, private periodoService: PeriodoActualizacionService) {\n    // }\n    // agregarFecha() {\n    //   console.log(typeof this.fechaDesde);\n    //   if (this.fechaDesde && this.fechaHasta) {\n    //     console.log(this.fechaDesde);\n    //     console.log(this.fechaHasta);\n    //     //cambiando formato fecha\n    //     const fechaDesdeDate: Date = new Date(this.fechaDesde);\n    //     const fechaHastaDate: Date = new Date(this.fechaHasta);\n    //     const añoDesde: number = fechaDesdeDate.getFullYear(); \n    //     const mesDesde: number = fechaDesdeDate.getMonth() + 1;\n    //     const diaDesde = fechaDesdeDate.getDate();\n    //     const añoHasta: number = fechaHastaDate.getFullYear();\n    //     const mesHasta: number = fechaHastaDate.getMonth() + 1;\n    //     const diaHasta = fechaHastaDate.getDate();\n    //     let semestre: number;\n    //     if (\n    //       (mesDesde >= 1 && mesDesde <= 7 && añoDesde === añoHasta && mesHasta >= 1 && mesHasta <= 7) \n    //     ) {\n    //       semestre = 1;\n    //     } else if (\n    //       (mesDesde >= 8 && mesDesde <= 12 && añoDesde === añoHasta && mesHasta >= 8 && mesHasta <= 12)\n    //     ) {\n    //       semestre = 2;\n    //     } else {\n    //       semestre = 0;\n    //     }\n    //     const fechaFormateadaInicio = `${añoDesde}-${mesDesde}-${diaDesde}`; // Formato 'YYYY-MM-DD'\n    //     const fechaFormateadaFin = `${añoHasta}-${mesHasta}-${diaHasta}`; // Formato 'YYYY-MM-DD'\n    //     let periodoActualizacion: PeriodosActualizacion ={\n    //       año: añoDesde,\n    //       semestre: semestre,\n    //       fechaInicio: fechaFormateadaInicio,\n    //       fechaFin: fechaFormateadaFin\n    //     }\n    //     console.log(fechaFormateadaFin);\n    //     this.periodoService.addFecha(periodoActualizacion).subscribe(\n    //       response => {\n    //         console.log(response);\n    //       },\n    //       error => {\n    //         console.log(error);\n    //         console.log(error.error)\n    //       }\n    //     );\n    //   } else {\n    //     console.log('Fechas inválidas');\n    //   }\n    // }\n    this.fechasPeriodosActualizacion = new FormGroup({\n      fechaDesde: new FormControl('', Validators.required),\n      fechaHasta: new FormControl('', Validators.required)\n    });\n  }\n  agregarFecha() {\n    const fechaDesdeControl = this.fechasPeriodosActualizacion.get('fechaDesde');\n    const fechaHastaControl = this.fechasPeriodosActualizacion.get('fechaHasta');\n    if (fechaDesdeControl && fechaHastaControl && fechaDesdeControl.value && fechaHastaControl.value) {\n      const fechaDesdeValue = fechaDesdeControl.value;\n      const fechaHastaValue = fechaHastaControl.value;\n      const fechaDesdeParts = fechaDesdeValue.split('-').map(Number);\n      const fechaHastaParts = fechaHastaValue.split('-').map(Number);\n      // Aquí, usamos el constructor new Date(YYYY, MM - 1, DD) para crear la fecha\n      const fechaDesde = new Date(fechaDesdeParts[0], fechaDesdeParts[1] - 1, fechaDesdeParts[2]);\n      const fechaHasta = new Date(fechaHastaParts[0], fechaHastaParts[1] - 1, fechaHastaParts[2]);\n      //probar ahora con lo comentado de arriba\n    }\n  }\n};\n\nAgregarFechaComponent = __decorate([Component({\n  selector: 'app-agregar-fecha',\n  templateUrl: './agregar-fecha.component.html',\n  styleUrls: ['./agregar-fecha.component.css']\n})], AgregarFechaComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","AgregarFechaComponent","constructor","fechasPeriodosActualizacion","fechaDesde","required","fechaHasta","agregarFecha","fechaDesdeControl","get","fechaHastaControl","value","fechaDesdeValue","fechaHastaValue","fechaDesdeParts","split","map","Number","fechaHastaParts","Date","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USUARIO\\Escritorio\\UCU\\BASES DE DATOS 1\\Nueva carpeta\\por ultima vez obligatorio-BDD\\Obligatorio-BDD\\proyecto-angular\\src\\app\\components\\agregar-fecha\\agregar-fecha.component.ts"],"sourcesContent":["import { Component } from '@angular/coe';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Router } from '@angular/router';\r\nimport { PeriodoActualizacionService } from '../../services/periodo-actualizacion.service';\r\nimport { PeriodosActualizacion } from '../../interfaces/periodosActualizacion';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-agregar-fecha',\r\n  templateUrl: './agregar-fecha.component.html',\r\n  styleUrls: ['./agregar-fecha.component.css']\r\n})\r\nexport class AgregarFechaComponent {\r\n\r\n  // fechaDesde: Date = new Date();\r\n  // fechaHasta: Date = new Date();\r\n  \r\n  // constructor(private toastr: ToastrService, private router: Router, private periodoService: PeriodoActualizacionService) {\r\n  // }\r\n\r\n  // agregarFecha() {\r\n  //   console.log(typeof this.fechaDesde);\r\n  //   if (this.fechaDesde && this.fechaHasta) {\r\n      \r\n  //     console.log(this.fechaDesde);\r\n  //     console.log(this.fechaHasta);\r\n\r\n  //     //cambiando formato fecha\r\n  //     const fechaDesdeDate: Date = new Date(this.fechaDesde);\r\n  //     const fechaHastaDate: Date = new Date(this.fechaHasta);\r\n\r\n  //     const añoDesde: number = fechaDesdeDate.getFullYear(); \r\n  //     const mesDesde: number = fechaDesdeDate.getMonth() + 1;\r\n  //     const diaDesde = fechaDesdeDate.getDate();\r\n\r\n  //     const añoHasta: number = fechaHastaDate.getFullYear();\r\n  //     const mesHasta: number = fechaHastaDate.getMonth() + 1;\r\n  //     const diaHasta = fechaHastaDate.getDate();\r\n      \r\n  //     let semestre: number;\r\n  \r\n  //     if (\r\n  //       (mesDesde >= 1 && mesDesde <= 7 && añoDesde === añoHasta && mesHasta >= 1 && mesHasta <= 7) \r\n  //     ) {\r\n  //       semestre = 1;\r\n  //     } else if (\r\n        \r\n  //       (mesDesde >= 8 && mesDesde <= 12 && añoDesde === añoHasta && mesHasta >= 8 && mesHasta <= 12)\r\n  //     ) {\r\n  //       semestre = 2;\r\n  //     } else {\r\n  //       semestre = 0;\r\n  //     }\r\n  \r\n          \r\n  //     const fechaFormateadaInicio = `${añoDesde}-${mesDesde}-${diaDesde}`; // Formato 'YYYY-MM-DD'\r\n  //     const fechaFormateadaFin = `${añoHasta}-${mesHasta}-${diaHasta}`; // Formato 'YYYY-MM-DD'\r\n\r\n  //     let periodoActualizacion: PeriodosActualizacion ={\r\n  //       año: añoDesde,\r\n  //       semestre: semestre,\r\n  //       fechaInicio: fechaFormateadaInicio,\r\n  //       fechaFin: fechaFormateadaFin\r\n  //     }\r\n\r\n  //     console.log(fechaFormateadaFin);\r\n  //     this.periodoService.addFecha(periodoActualizacion).subscribe(\r\n  //       response => {\r\n  //         console.log(response);\r\n  //       },\r\n  //       error => {\r\n  //         console.log(error);\r\n  //         console.log(error.error)\r\n  //       }\r\n  //     );\r\n  //   } else {\r\n  //     console.log('Fechas inválidas');\r\n  //   }\r\n  // }\r\n  \r\n  fechasPeriodosActualizacion = new FormGroup({\r\n    fechaDesde: new FormControl('', Validators.required),\r\n    fechaHasta: new FormControl('', Validators.required)\r\n  });\r\n\r\n\r\n  constructor(){\r\n\r\n  }\r\n\r\n  agregarFecha() {\r\n    const fechaDesdeControl = this.fechasPeriodosActualizacion.get('fechaDesde');\r\n    const fechaHastaControl = this.fechasPeriodosActualizacion.get('fechaHasta');\r\n  \r\n    if (fechaDesdeControl && fechaHastaControl && fechaDesdeControl.value && fechaHastaControl.value) {\r\n      const fechaDesdeValue: string = fechaDesdeControl.value;\r\n      const fechaHastaValue: string = fechaHastaControl.value;\r\n  \r\n      const fechaDesdeParts = fechaDesdeValue.split('-').map(Number);\r\n      const fechaHastaParts = fechaHastaValue.split('-').map(Number);\r\n  \r\n      // Aquí, usamos el constructor new Date(YYYY, MM - 1, DD) para crear la fecha\r\n      const fechaDesde: Date = new Date(fechaDesdeParts[0], fechaDesdeParts[1] - 1, fechaDesdeParts[2]);\r\n      const fechaHasta: Date = new Date(fechaHastaParts[0], fechaHastaParts[1] - 1, fechaHastaParts[2]);\r\n\r\n      //probar ahora con lo comentado de arriba\r\n      \r\n      \r\n    }\r\n  }\r\n  \r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,cAAc;AAKxC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EA0EhCC,YAAA;IAxEA;IACA;IAEA;IACA;IAEA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,KAAAC,2BAA2B,GAAG,IAAIJ,SAAS,CAAC;MAC1CK,UAAU,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACK,QAAQ,CAAC;MACpDC,UAAU,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACK,QAAQ;KACpD,CAAC;EAKF;EAEAE,YAAYA,CAAA;IACV,MAAMC,iBAAiB,GAAG,IAAI,CAACL,2BAA2B,CAACM,GAAG,CAAC,YAAY,CAAC;IAC5E,MAAMC,iBAAiB,GAAG,IAAI,CAACP,2BAA2B,CAACM,GAAG,CAAC,YAAY,CAAC;IAE5E,IAAID,iBAAiB,IAAIE,iBAAiB,IAAIF,iBAAiB,CAACG,KAAK,IAAID,iBAAiB,CAACC,KAAK,EAAE;MAChG,MAAMC,eAAe,GAAWJ,iBAAiB,CAACG,KAAK;MACvD,MAAME,eAAe,GAAWH,iBAAiB,CAACC,KAAK;MAEvD,MAAMG,eAAe,GAAGF,eAAe,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAC9D,MAAMC,eAAe,GAAGL,eAAe,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAE9D;MACA,MAAMb,UAAU,GAAS,IAAIe,IAAI,CAACL,eAAe,CAAC,CAAC,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,CAAC;MACjG,MAAMR,UAAU,GAAS,IAAIa,IAAI,CAACD,eAAe,CAAC,CAAC,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,CAAC;MAEjG;;EAIJ;CAED;;AAnGYjB,qBAAqB,GAAAmB,UAAA,EALjCvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWtB,qBAAqB,CAmGjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}