// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataInfo))]
    [Migration("20231105204108_NuevaMigracion")]
    partial class NuevaMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Clases.Agenda", b =>
                {
                    b.Property<int>("nro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CI")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fechaAgenda")
                        .HasColumnType("date");

                    b.HasKey("nro");

                    b.HasIndex("CI");

                    b.ToTable("agenda", (string)null);
                });

            modelBuilder.Entity("API.Clases.CarnetSalud", b =>
                {
                    b.Property<int>("CI")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fechaEmision")
                        .HasColumnType("date");

                    b.Property<string>("Comprobante")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly>("fechaVencimiento")
                        .HasColumnType("date");

                    b.HasKey("CI", "fechaEmision");

                    b.ToTable("carnet_salud", (string)null);
                });

            modelBuilder.Entity("API.Clases.Funcionarios", b =>
                {
                    b.Property<int>("CI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateOnly>("fechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("logId")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.HasKey("CI");

                    b.HasIndex("logId");

                    b.ToTable("funcionarios", (string)null);
                });

            modelBuilder.Entity("API.Clases.Logins", b =>
                {
                    b.Property<int>("logId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("password")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("logId");

                    b.ToTable("logins", (string)null);
                });

            modelBuilder.Entity("API.Clases.PeriodosActualizacion", b =>
                {
                    b.Property<DateOnly>("fechaInicio")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaFin")
                        .HasColumnType("date");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<int>("semestre")
                        .HasColumnType("int");

                    b.HasKey("fechaInicio", "fechaFin");

                    b.ToTable("periodos_actualizacion", (string)null);
                });

            modelBuilder.Entity("API.Clases.Agenda", b =>
                {
                    b.HasOne("API.Clases.Funcionarios", "FuncId")
                        .WithMany()
                        .HasForeignKey("CI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuncId");
                });

            modelBuilder.Entity("API.Clases.CarnetSalud", b =>
                {
                    b.HasOne("API.Clases.Funcionarios", "FuncCI")
                        .WithMany()
                        .HasForeignKey("CI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuncCI");
                });

            modelBuilder.Entity("API.Clases.Funcionarios", b =>
                {
                    b.HasOne("API.Clases.Logins", "Log")
                        .WithMany()
                        .HasForeignKey("logId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");
                });
#pragma warning restore 612, 618
        }
    }
}
